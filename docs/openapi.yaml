openapi: 3.0.3
info:
  title: Go Newsletter API
  description: |
    RESTful API for a Go-based newsletter platform. Editors can register, manage newsletters, publish posts, and subscribers can subscribe/unsubscribe via email confirmation links.
  version: 0.1.0
servers:
  - url: http://localhost:3000/
    description: Local development server
# Tags to group endpoints into logical namespaces
tags:
  - name: Auth
    description: Endpoints for authentication and password management
  - name: Newsletters
    description: Endpoints to manage newsletters
  - name: Posts
    description: Endpoints to publish and list newsletter posts
  - name: Subscribers
    description: Endpoints to manage subscribers (editor-only)
  - name: Subscriptions
    description: Public endpoints for subscribe/unsubscribe flows
components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Authorization
      in: header
      description: "Bearer access token sent as `Authorization: Bearer <token>`"
  schemas:
    # Auth namespace
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: short-lived JWT access token
        refreshToken:
          type: string
          description: long-lived refresh token
      required:
        - accessToken
        - refreshToken
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
          format: password
      required:
        - token
        - newPassword
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
    # Newsletters namespace
    Newsletter:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - ownerId
        - createdAt
    NewsletterCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    NewsletterUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    # Posts namespace
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        newsletterId:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        publishedAt:
          type: string
          format: date-time
      required:
        - id
        - newsletterId
        - title
        - content
    PostCreate:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        publishImmediately:
          type: boolean
      required:
        - title
        - content
    PostDeliveryInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        opened:
          type: boolean
    # Subscribers namespace
    Subscriber:
      type: object
      properties:
        id:
          type: string
          description: Firebase UID or generated ID
        email:
          type: string
          format: email
        subscribedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - subscribedAt
    SubscriptionRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    # Error schema
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Create a new editor account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "201":
          description: Editor created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login as editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Obtain a new access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/password-reset/request:
    post:
      tags:
        - Auth
      summary: Request password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: Reset email sent
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/password-reset/confirm:
    post:
      tags:
        - Auth
      summary: Confirm password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /newsletters:
    get:
      tags:
        - Newsletters
      summary: List all newsletters for authenticated editor
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Array of newsletters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Newsletter"
    post:
      tags:
        - Newsletters
      summary: Create a new newsletter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewsletterCreate"
      responses:
        "201":
          description: Newsletter created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Newsletter"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /newsletters/{newsletterId}:
    get:
      tags:
        - Newsletters
      summary: Get a specific newsletter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Newsletter object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Newsletter"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Newsletters
      summary: Update newsletter metadata
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewsletterUpdate"
      responses:
        "200":
          description: Updated newsletter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Newsletter"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Newsletters
      summary: Delete a newsletter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Deleted successfully
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /newsletters/{newsletterId}/posts:
    get:
      tags:
        - Posts
      summary: List posts in a newsletter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: cursor
          required: false
          schema:
            type: string
            format: date-time
          description: return results after this timestamp
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: max number of posts to return
      responses:
        "200":
          description: Page of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  nextCursor:
                    type: string
                    format: date-time
    post:
      tags:
        - Posts
      summary: Publish a new post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreate"
      responses:
        "201":
          description: Post published
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /newsletters/{newsletterId}/posts/{postId}/publish:
    post:
      tags:
        - Posts
      summary: Publish an existing post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: postId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Post published
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: Get post metrics
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Post metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
                  totalSend:
                    type: integer
                  totalOpened:
                    type: integer
                  deliveries:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostDeliveryInfo"
  /post-deliveries/{deliveryId}/pixel:
    get:
      tags:
        - Posts
      summary: Track email open
      parameters:
        - in: path
          name: deliveryId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tracking pixel
          content:
            image/png:
              schema:
                type: string
                format: binary
  /newsletters/{newsletterId}/subscribers:
    get:
      tags:
        - Subscribers
      summary: List subscribers of a newsletter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: cursor
          required: false
          schema:
            type: string
            format: date-time
          description: return results after this timestamp
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: max number of subscribers to return
      responses:
        "200":
          description: Page of subscribers
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscribers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subscriber"
                  nextCursor:
                    type: string
                    format: date-time
  /newsletters/{newsletterId}/subscribe:
    post:
      tags:
        - Subscriptions
      summary: Subscribe to a newsletter
      parameters:
        - in: path
          name: newsletterId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
      responses:
        "202":
          description: Confirmation email sent
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /subscriptions/confirm:
    get:
      tags:
        - Subscriptions
      summary: Confirm a subscription
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Subscription confirmed
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /subscriptions/unsubscribe:
    get:
      tags:
        - Subscriptions
      summary: Unsubscribe via email link
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Unsubscribed successfully
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/whoami:
    get:
      tags:
        - Auth
      summary: Retrieve the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  security:
    - bearerAuth: []
